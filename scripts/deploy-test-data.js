const { ethers } = require('ethers');
const newsService = require('../src/services/newsService');
const validationService = require('../src/services/validationService');
const stakingService = require('../src/services/stakingService');
const oracleService = require('../src/services/oracleService');

/**
 * Script para desplegar datos de prueba para testing
 * Crea al menos 3 elementos de cada categor√≠a principal
 */

async function deployTestData() {
  console.log('üöÄ Iniciando despliegue de datos de prueba...\n');

  try {
    // 1. Crear noticias de prueba
    console.log('üì∞ Creando noticias de prueba...');
    await createTestNews();

    // 2. Crear or√°culos de prueba
    console.log('ü§ñ Creando or√°culos de prueba...');
    await createTestOracles();

    // 3. Crear validadores de prueba
    console.log('üë• Creando validadores de prueba...');
    await createTestValidators();

    // 4. Crear validaciones de prueba
    console.log('‚úÖ Creando validaciones de prueba...');
    await createTestValidations();

    // 5. Crear art√≠culos TruthBoard de prueba
    console.log('üîí Creando art√≠culos TruthBoard de prueba...');
    await createTestTruthBoardArticles();

    console.log('\n‚úÖ Datos de prueba desplegados exitosamente!');
    console.log('üîó Puedes probar la API en: http://localhost:3000/health');

  } catch (error) {
    console.error('‚ùå Error al desplegar datos de prueba:', error);
    process.exit(1);
  }
}

async function createTestNews() {
  const testNews = [
    {
      url: 'https://example.com/news/bitcoin-price-surge',
      title: 'Bitcoin alcanza nuevo m√°ximo hist√≥rico de $100,000',
      content: 'El precio de Bitcoin ha alcanzado un nuevo m√°ximo hist√≥rico de $100,000 d√≥lares, impulsado por la adopci√≥n institucional y las regulaciones favorables. Los analistas predicen que podr√≠a llegar a $150,000 antes de fin de a√±o.',
      category: 'cryptocurrency',
      source: 'CryptoNews'
    },
    {
      url: 'https://example.com/news/ai-breakthrough',
      title: 'Nueva IA desarrollada por OpenAI supera capacidades humanas en matem√°ticas',
      content: 'OpenAI ha anunciado el desarrollo de una nueva inteligencia artificial que puede resolver problemas matem√°ticos complejos superando las capacidades humanas promedio. Este avance marca un hito en el desarrollo de AGI.',
      category: 'technology',
      source: 'TechCrunch'
    },
    {
      url: 'https://example.com/news/climate-action',
      title: 'Acuerdo global para reducir emisiones de carbono en 50% para 2030',
      content: 'Los l√≠deres mundiales han firmado un acuerdo hist√≥rico para reducir las emisiones de carbono en un 50% antes de 2030. El acuerdo incluye inversiones masivas en energ√≠a renovable y tecnolog√≠as de captura de carbono.',
      category: 'environment',
      source: 'Climate News'
    },
    {
      url: 'https://example.com/news/fake-meteor',
      title: 'FALSO: Meteorito gigante impactar√° la Tierra ma√±ana',
      content: 'Circula informaci√≥n falsa sobre un supuesto meteorito que impactar√≠a la Tierra. NASA y otras agencias espaciales han desmentido categ√≥ricamente esta informaci√≥n.',
      category: 'science',
      source: 'FakeNewsSource',
      isFake: true
    },
    {
      url: 'https://example.com/news/medical-breakthrough',
      title: 'Descubierta cura para el Alzheimer en pruebas cl√≠nicas fase 3',
      content: 'Un nuevo tratamiento experimental ha mostrado resultados prometedores en la reversi√≥n de s√≠ntomas de Alzheimer en pacientes en fase temprana. Los resultados de fase 3 muestran una mejora del 80% en funciones cognitivas.',
      category: 'health',
      source: 'Medical Journal'
    }
  ];

  for (let i = 0; i < testNews.length; i++) {
    const news = testNews[i];
    console.log(`  üìÑ Creando noticia ${i + 1}: ${news.title.substring(0, 50)}...`);
    
    try {
      // Simular procesamiento de contenido
      const processedContent = await newsService.processContent({
        url: news.url,
        content: news.content,
        title: news.title
      });

      // Simular hash IPFS
      const contentHash = `Qm${Math.random().toString(36).substring(2, 15)}${Math.random().toString(36).substring(2, 15)}`;
      
      // Simular estado de validaci√≥n
      const validationStatus = news.isFake ? 'fake' : (Math.random() > 0.3 ? 'verified' : 'uncertain');
      const score = news.isFake ? Math.floor(Math.random() * 30) + 10 : Math.floor(Math.random() * 30) + 70;

      console.log(`    ‚úì Hash: ${contentHash}`);
      console.log(`    ‚úì Estado: ${validationStatus} (${score} puntos)`);

    } catch (error) {
      console.log(`    ‚ùå Error: ${error.message}`);
    }
  }
  console.log('‚úÖ Noticias de prueba creadas\n');
}

async function createTestOracles() {
  const testOracles = [
    {
      address: '0x1234567890123456789012345678901234567890',
      specialization: 'fake_news',
      name: 'FakeNewsDetector AI',
      accuracy: 94.5,
      stake: '15.0'
    },
    {
      address: '0x2345678901234567890123456789012345678901',
      specialization: 'deepfake',
      name: 'DeepFake Analyzer',
      accuracy: 89.2,
      stake: '12.5'
    },
    {
      address: '0x3456789012345678901234567890123456789012',
      specialization: 'image_manipulation',
      name: 'Image Forensics AI',
      accuracy: 91.8,
      stake: '10.0'
    },
    {
      address: '0x4567890123456789012345678901234567890123',
      specialization: 'text_analysis',
      name: 'Bias Detection Engine',
      accuracy: 87.3,
      stake: '8.5'
    }
  ];

  for (let i = 0; i < testOracles.length; i++) {
    const oracle = testOracles[i];
    console.log(`  ü§ñ Registrando or√°culo ${i + 1}: ${oracle.name}`);
    
    try {
      // Simular registro de or√°culo
      const oracleId = `oracle_${Date.now()}_${i}`;
      const txHash = `0x${Math.random().toString(16).substring(2, 66)}`;

      console.log(`    ‚úì ID: ${oracleId}`);
      console.log(`    ‚úì Especializaci√≥n: ${oracle.specialization}`);
      console.log(`    ‚úì Precisi√≥n: ${oracle.accuracy}%`);
      console.log(`    ‚úì Stake: ${oracle.stake} ETH`);
      console.log(`    ‚úì TX: ${txHash}`);

    } catch (error) {
      console.log(`    ‚ùå Error: ${error.message}`);
    }
  }
  console.log('‚úÖ Or√°culos de prueba registrados\n');
}

async function createTestValidators() {
  const testValidators = [
    {
      address: '0x5678901234567890123456789012345678901234',
      category: 'journalist',
      name: 'Professional Journalist',
      reputation: 850,
      stake: '5.0'
    },
    {
      address: '0x6789012345678901234567890123456789012345',
      category: 'fact_checker',
      name: 'Fact Checker Expert',
      reputation: 920,
      stake: '7.5'
    },
    {
      address: '0x7890123456789012345678901234567890123456',
      category: 'expert',
      name: 'Domain Expert',
      reputation: 780,
      stake: '10.0'
    },
    {
      address: '0x8901234567890123456789012345678901234567',
      category: 'community',
      name: 'Community Validator',
      reputation: 650,
      stake: '2.5'
    }
  ];

  for (let i = 0; i < testValidators.length; i++) {
    const validator = testValidators[i];
    console.log(`  üë§ Registrando validador ${i + 1}: ${validator.name}`);
    
    try {
      // Simular registro de validador
      const validatorId = `validator_${Date.now()}_${i}`;
      const txHash = `0x${Math.random().toString(16).substring(2, 66)}`;

      console.log(`    ‚úì ID: ${validatorId}`);
      console.log(`    ‚úì Categor√≠a: ${validator.category}`);
      console.log(`    ‚úì Reputaci√≥n: ${validator.reputation}`);
      console.log(`    ‚úì Stake: ${validator.stake} ETH`);
      console.log(`    ‚úì TX: ${txHash}`);

    } catch (error) {
      console.log(`    ‚ùå Error: ${error.message}`);
    }
  }
  console.log('‚úÖ Validadores de prueba registrados\n');
}

async function createTestValidations() {
  console.log('  üîç Creando validaciones simuladas...');
  
  // Simular varias validaciones para las noticias creadas
  const validationResults = [
    { contentHash: 'QmFakeNews123', votes: 15, trueVotes: 2, fakeVotes: 13, score: 15 },
    { contentHash: 'QmRealNews456', votes: 12, trueVotes: 11, fakeVotes: 1, score: 92 },
    { contentHash: 'QmMedicalNews789', votes: 8, trueVotes: 7, fakeVotes: 1, score: 88 },
    { contentHash: 'QmCryptoNews012', votes: 20, trueVotes: 18, fakeVotes: 2, score: 90 },
    { contentHash: 'QmClimateNews345', votes: 14, trueVotes: 13, fakeVotes: 1, score: 93 }
  ];

  for (let i = 0; i < validationResults.length; i++) {
    const validation = validationResults[i];
    console.log(`    ‚úì Validaci√≥n ${i + 1}: ${validation.contentHash} - Score: ${validation.score}`);
    console.log(`      Votos: ${validation.trueVotes} real, ${validation.fakeVotes} fake`);
  }

  console.log('‚úÖ Validaciones de prueba creadas\n');
}

async function createTestTruthBoardArticles() {
  const testArticles = [
    {
      title: 'Investigaci√≥n: Corrupci√≥n en contratos p√∫blicos de infraestructura',
      content: 'Una investigaci√≥n revela irregularidades en la adjudicaci√≥n de contratos p√∫blicos por valor de $50 millones. Los documentos filtrados muestran v√≠nculos entre funcionarios y empresas beneficiadas.',
      region: 'latam',
      category: 'corruption'
    },
    {
      title: 'Expos√©: Empresa tecnol√≥gica vende datos de usuarios sin consentimiento',
      content: 'Documentos internos revelan que una importante empresa tecnol√≥gica ha estado vendiendo datos personales de millones de usuarios a terceros sin su consentimiento expl√≠cito.',
      region: 'usa',
      category: 'privacy'
    },
    {
      title: 'Investigaci√≥n: Red de tr√°fico de influencias en sector energ√©tico',
      content: 'Fuentes internas revelan una compleja red de tr√°fico de influencias que ha permitido la aprobaci√≥n irregular de proyectos energ√©ticos controvertidos.',
      region: 'europe',
      category: 'energy'
    }
  ];

  for (let i = 0; i < testArticles.length; i++) {
    const article = testArticles[i];
    console.log(`  üìù Publicando art√≠culo TruthBoard ${i + 1}: ${article.title.substring(0, 50)}...`);
    
    try {
      // Simular publicaci√≥n an√≥nima
      const articleId = `zk_article_${Date.now()}_${i}`;
      const citreaTxHash = `0x${Math.random().toString(16).substring(2, 66)}`;
      const ipfsHash = `Qm${Math.random().toString(36).substring(2, 15)}${Math.random().toString(36).substring(2, 15)}`;
      const donationAddress = `0x${Math.random().toString(16).substring(2, 42)}`;

      console.log(`    ‚úì ID: ${articleId}`);
      console.log(`    ‚úì Regi√≥n: ${article.region}`);
      console.log(`    ‚úì Citrea TX: ${citreaTxHash}`);
      console.log(`    ‚úì IPFS: ${ipfsHash}`);
      console.log(`    ‚úì Donaciones: ${donationAddress}`);

    } catch (error) {
      console.log(`    ‚ùå Error: ${error.message}`);
    }
  }
  console.log('‚úÖ Art√≠culos TruthBoard de prueba creados\n');
}

// Ejecutar script si es llamado directamente
if (require.main === module) {
  deployTestData()
    .then(() => {
      console.log('üéâ Script completado exitosamente');
      process.exit(0);
    })
    .catch((error) => {
      console.error('üí• Error en el script:', error);
      process.exit(1);
    });
}

module.exports = {
  deployTestData,
  createTestNews,
  createTestOracles,
  createTestValidators,
  createTestValidations,
  createTestTruthBoardArticles
};
